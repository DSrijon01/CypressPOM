{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-11T10:29:54.644Z",
    "end": "2023-09-11T10:30:07.971Z",
    "duration": 13327,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "246b152b-dbd3-48de-9532-5f0f82079d02",
      "title": "",
      "fullFile": "cypress\\e2e\\3-examples\\Test8_FrameWork.cy.js",
      "file": "cypress\\e2e\\3-examples\\Test8_FrameWork.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fafeef35-2076-4727-a693-fed7a9acc835",
          "title": "My eighth Test Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Navigating User Login",
              "fullTitle": "My eighth Test Suite Navigating User Login",
              "timedOut": null,
              "duration": 10545,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Navigate to the test site\ncy.visit(\"https://rahulshettyacademy.com/angularpractice/\");\n// Autofill name from fixture data\ncy.get(':nth-child(1) > .form-control').type(this.data.name);\n// Assertion for name Autofill \ncy.get(':nth-child(1) > .form-control').should('have.value', this.data.name);\n// Autofill gender from fixture data\ncy.get('select').select(this.data.gender);\n//Assertion for two way data binding\ncy.get(':nth-child(4) > .ng-untouched').should('have.value', this.data.name);\n// Assertion for name value. Minimum 2 characters.\ncy.get(':nth-child(1) > .form-control').should('have.attr', 'minlength', '2');\n// Inline Radio Button Disbled or enabled Assertion\ncy.get('#inlineRadio1').should('be.enabled');\ncy.get('#inlineRadio2').should('be.enabled');\ncy.get('#inlineRadio3').should('be.disabled');\n// cy.pause()\n//navigate to the shop menu button \ncy.get(':nth-child(2) > .nav-link').click();\n// Selecting a product form the shop page - Hard Coded \ncy.get('h4.card-title').each(($el, index, $list) => {\n  if ($el.text().includes('Blackberry')) {\n    cy.get('button.btn.btn-info').eq(index).click();\n  }\n});\n// Selecting a product form the shop page from Support --> Custom Commands (Commands.js)\ncy.selectProduct('Nokia Edge');\n// Selecting a product form the shop page from Fixture--> Support --> Custom Commands\nthis.data.productName.forEach(function (element) {\n  cy.selectProduct(element);\n});\n// Assertion that all 3 products got slected\ncy.get('#navbarResponsive > .navbar-nav > .nav-item > .nav-link').click();\nconst expectedProducts = ['Blackberry', 'Nokia Edge', 'iphone X'];\n// Iterate through the expected product names and assert them - With a Loop\nexpectedProducts.forEach(product => {\n  cy.get(':nth-child(1) > .col-sm-8, :nth-child(2) > .col-sm-8, :nth-child(3) > .col-sm-8 ').should('contain.text', product);\n});\n// Assert that all three products are selected - Hard Coded\ncy.get(':nth-child(1) > .col-sm-8').should('contain.text', 'Blackberry');\ncy.get(':nth-child(2) > .col-sm-8').should('contain.text', 'Nokia Edge');\ncy.get(':nth-child(3) > .col-sm-8').should('contain.text', 'iphone X');\n// cy.pause()\n// Declaring Variable that will store the added up values/price\nvar sum = 0;\n// Validating the total Sum/Value/Price of Products \ncy.get('tr td:nth-child(4) > strong').each(($el, index, $list) => {\n  // Logging the values/price from the selector that got captured \n  cy.log($el.text());\n  // Captured Value/Text splitting for white space issue mitigation\n  const LoggedText = $el.text();\n  var result = LoggedText.split(\" \");\n  // Trimming the white space\n  result = result[1].trim();\n  // Sum of all 3 selected items without the whitespace\n  sum = Number(sum) + Number(result);\n}).then(function () {\n  // Logging the sum value for assertion\n  cy.log(sum);\n});\n// Asserting through equalizing\ncy.get('h3 strong').then(function (element) {\n  // White Space trimming for the captured total value\n  const Total = element.text();\n  var TotalResult = Total.split(\" \");\n  TotalResult = TotalResult[1].trim();\n  // Equaling for assertion \n  expect(Number(TotalResult)).to.equal(sum);\n});\n// Clicking on Checkout Button using Text Contains\ncy.contains('Checkout').click();\n// Typing into the country Selector on next checkout page\ncy.get('#country').type('India');\ncy.wait(6000);\n// Clicking on the Suggested Country\ncy.get('.suggestions > ul > li > a').click();\n// Select the Agreement Check Box\ncy.get('.checkbox > label').click();\n// Click on Purchase button \ncy.get('.ng-untouched > .btn').click();\n// CSS Selector \ncy.get('input[type=\"submit\"]').click();\n// Alert Validation with extra text \n// cy.get('.alert').should('have.text', 'Success! Thank you! Your order will be delivered in next few weeks :-).') -- Wont Work for Extra Text\n// Alert Validation with expect to be true\ncy.get('.alert').then(function (element) {\n  const actualText = element.text();\n  expect(actualText.includes(\"Success! Thank you! Your order will be delivered in next few weeks :-).\")).to.be.true;\n});",
              "err": {},
              "uuid": "34db0781-4f28-48cf-a03e-0021ede88993",
              "parentUUID": "fafeef35-2076-4727-a693-fed7a9acc835",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "34db0781-4f28-48cf-a03e-0021ede88993"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10545,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}